==============================================================================
------------------------------------------------------------------------------
                                                                *config.options*
                                `config.options`
Your plugin configuration with its default values.

Default values:
>
  config.options = {
    -- Prints useful logs about what event are triggered, and reasons actions are executed.
    debug = false,
    -- Keymap to trigger the transform.
    keymap = {
      -- Normal mode keymap.
      ["n"] = "<Leader>~",
      -- Visual mode keymap.
      ["v"] = "<Leader>~",
    },
  }

  local function init()
    local o = config.options
    D.log("config", "Initializing TextTransform with %s", utils.dump(o))

    vim.keymap.set("n", o.keymap.n, telescope_popup, { silent = true })
    vim.keymap.set("v", o.keymap.v, telescope_popup, { silent = true })
  end

<

------------------------------------------------------------------------------
                                                                *config.setup()*
                           `config.setup`({options})
Define your text-transform setup.

Parameters ~
{options} `(table)` Module config table. See |TextTransform.options|.

Usage ~
`require("text-transform").setup()` (add `{}` with your |TextTransform.options| table)


==============================================================================
------------------------------------------------------------------------------
                                                          *fn.replace_columns()*
                     `fn.replace_columns`({transform_name})
Replaces each column in visual block mode selection with the given transform.
Assumes that the each selection is 1 character and operates on the whole word under each cursor.


==============================================================================
------------------------------------------------------------------------------
                                                       *transformers.to_words()*
                       `transformers.to_words`({string})
Splits a string into words.
@param string string
@return table

------------------------------------------------------------------------------
                                                *transformers.transform_words()*
      `transformers.transform_words`({words}, {with_word_cb}, {separator})
Transforms a table of strings into a string using a callback and separator.
The callback is called with the word, the index, and the table of words.
The separator is added between each word.

@param words string|table string or table of strings
@param with_word_cb function (word: string, index: number, words: table) -> string
@param separator string|nil (optional)
@return string

------------------------------------------------------------------------------
                                                  *transformers.to_camel_case()*
                     `transformers.to_camel_case`({string})
Transforms a string into camelCase.
@param string string
@return string

------------------------------------------------------------------------------
                                                  *transformers.to_snake_case()*
                     `transformers.to_snake_case`({string})
Transfroms a string into snake_case.
@param string any
@return string

------------------------------------------------------------------------------
                                                 *transformers.to_pascal_case()*
                    `transformers.to_pascal_case`({string})
Transforms a string into PascalCase.
@param string string
@return string

------------------------------------------------------------------------------
                                                  *transformers.to_title_case()*
                     `transformers.to_title_case`({string})
Transforms a string into Title Case.
@param string string
@return string

------------------------------------------------------------------------------
                                                  *transformers.to_kebab_case()*
                     `transformers.to_kebab_case`({string})
Transforms a string into kebab-case.
@param string string
@return string

------------------------------------------------------------------------------
                                                    *transformers.to_dot_case()*
                      `transformers.to_dot_case`({string})
Transforms a string into dot.case.
@param string string
@return string

------------------------------------------------------------------------------
                                                  *transformers.to_const_case()*
                     `transformers.to_const_case`({string})
Transforms a string into CONSTANT_CASE.
@param string string
@return string


==============================================================================
------------------------------------------------------------------------------
                                                                 *utils.merge()*
                           `utils.merge`({t1}, {t2})
Merges two tables into one. Same as `vim.tbl_extend("keep", t1, t2)`.
Mutates the first table.

TODO accept multiple tables to merge

@param t1 table
@param t2 table
@return table

------------------------------------------------------------------------------
                                                                  *utils.dump()*
                              `utils.dump`({obj})
Dumps the object into a string.
@param obj any
@return string


 vim:tw=78:ts=8:noet:ft=help:norl: